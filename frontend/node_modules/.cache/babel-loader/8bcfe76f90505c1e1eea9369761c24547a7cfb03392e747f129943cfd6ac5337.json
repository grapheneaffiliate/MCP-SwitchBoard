{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\atchi\\\\servers\\\\mcp-switchboard\\\\frontend\\\\src\\\\LogsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LogsPage() {\n  _s();\n  const [logs, setLogs] = useState([]);\n  const [selectedServer, setSelectedServer] = useState('');\n  const [servers, setServers] = useState([]); // Assume you'll fetch server list\n\n  useEffect(() => {\n    // Fetch servers for dropdown - replace with your actual API call\n    const fetchServers = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/servers');\n        if (response.ok) {\n          const data = await response.json();\n          setServers(data);\n        } else {\n          console.error('Failed to fetch servers');\n        }\n      } catch (error) {\n        console.error('Error fetching servers:', error);\n      }\n    };\n    fetchServers();\n  }, []);\n  useEffect(() => {\n    const fetchLogs = async () => {\n      if (selectedServer) {\n        try {\n          const response = await fetch(`http://localhost:8000/servers/${selectedServer}/logs`);\n          if (response.ok) {\n            const data = await response.json();\n            setLogs(data);\n          } else {\n            console.error('Failed to fetch logs');\n            setLogs([]); // Clear logs on error\n          }\n        } catch (error) {\n          console.error('Error fetching logs:', error);\n          setLogs([]); // Clear logs on error\n        }\n      } else {\n        setLogs([]); // Clear logs if no server selected\n      }\n    };\n    fetchLogs();\n  }, [selectedServer]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Server Logs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"server-select\",\n        style: {\n          marginRight: '10px'\n        },\n        children: \"Select Server:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"server-select\",\n        value: selectedServer,\n        onChange: e => setSelectedServer(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"-- Select Server --\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), servers.map(server => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: server.id,\n          children: server.name\n        }, server.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxHeight: '400px',\n        overflowY: 'auto',\n        border: '1px solid #ccc',\n        padding: '10px'\n      },\n      children: logs.length > 0 ? logs.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontFamily: 'monospace',\n          fontSize: '12px',\n          borderBottom: '1px dotted #eee',\n          padding: '5px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: '#999',\n            marginRight: '10px'\n          },\n          children: log.timestamp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Command:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), \" \", log.command, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 81\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: \"Output:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            whiteSpace: 'pre-wrap',\n            fontFamily: 'monospace'\n          },\n          children: log.output\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this), log.success ? /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'green',\n            marginLeft: '10px'\n          },\n          children: \"Success\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: 'red',\n            marginLeft: '10px'\n          },\n          children: \"Failed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)) : selectedServer ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No logs available for the selected server.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Select a server to view logs.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(LogsPage, \"BNFs53VshY+LnK/TyZ3ikpXIiY8=\");\n_c = LogsPage;\nexport default LogsPage;\nvar _c;\n$RefreshReg$(_c, \"LogsPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","LogsPage","_s","logs","setLogs","selectedServer","setSelectedServer","servers","setServers","fetchServers","response","fetch","ok","data","json","console","error","fetchLogs","children","fileName","_jsxFileName","lineNumber","columnNumber","style","marginBottom","htmlFor","marginRight","id","value","onChange","e","target","map","server","name","maxHeight","overflowY","border","padding","length","log","index","fontFamily","fontSize","borderBottom","color","timestamp","fontWeight","command","whiteSpace","output","success","marginLeft","_c","$RefreshReg$"],"sources":["C:/Users/atchi/servers/mcp-switchboard/frontend/src/LogsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction LogsPage() {\r\n  const [logs, setLogs] = useState([]);\r\n  const [selectedServer, setSelectedServer] = useState('');\r\n  const [servers, setServers] = useState([]); // Assume you'll fetch server list\r\n\r\n  useEffect(() => {\r\n    // Fetch servers for dropdown - replace with your actual API call\r\n    const fetchServers = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:8000/servers');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setServers(data);\r\n        } else {\r\n          console.error('Failed to fetch servers');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching servers:', error);\r\n      }\r\n    };\r\n\r\n    fetchServers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchLogs = async () => {\r\n      if (selectedServer) {\r\n        try {\r\n          const response = await fetch(`http://localhost:8000/servers/${selectedServer}/logs`);\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            setLogs(data);\r\n          } else {\r\n            console.error('Failed to fetch logs');\r\n            setLogs([]); // Clear logs on error\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching logs:', error);\r\n          setLogs([]); // Clear logs on error\r\n        }\r\n      } else {\r\n        setLogs([]); // Clear logs if no server selected\r\n      }\r\n    };\r\n\r\n    fetchLogs();\r\n  }, [selectedServer]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Server Logs</h2>\r\n      \r\n      <div style={{ marginBottom: '10px' }}>\r\n        <label htmlFor=\"server-select\" style={{ marginRight: '10px' }}>Select Server:</label>\r\n        <select\r\n          id=\"server-select\"\r\n          value={selectedServer}\r\n          onChange={(e) => setSelectedServer(e.target.value)}\r\n        >\r\n          <option value=\"\">-- Select Server --</option>\r\n          {servers.map(server => (\r\n            <option key={server.id} value={server.id}>\r\n              {server.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n\r\n      <div style={{ maxHeight: '400px', overflowY: 'auto', border: '1px solid #ccc', padding: '10px' }}>\r\n        {logs.length > 0 ? (\r\n          logs.map((log, index) => (\r\n            <div key={index} style={{ fontFamily: 'monospace', fontSize: '12px', borderBottom: '1px dotted #eee', padding: '5px 0' }}>\r\n              <span style={{ color: '#999', marginRight: '10px' }}>{log.timestamp}</span>\r\n              <span style={{ fontWeight: 'bold' }}>Command:</span> {log.command}<br />\r\n              <span style={{ fontWeight: 'bold' }}>Output:</span> \r\n              <div style={{ whiteSpace: 'pre-wrap', fontFamily: 'monospace' }}>{log.output}</div>\r\n              {log.success ? (\r\n                <span style={{ color: 'green', marginLeft: '10px' }}>Success</span>\r\n              ) : (\r\n                <span style={{ color: 'red', marginLeft: '10px' }}>Failed</span>\r\n              )}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          selectedServer ? (\r\n            <div>No logs available for the selected server.</div>\r\n          ) : (\r\n            <div>Select a server to view logs.</div>\r\n          )\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LogsPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}