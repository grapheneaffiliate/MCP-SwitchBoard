{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\atchi\\\\servers\\\\mcp-switchboard\\\\frontend\\\\src\\\\TasksPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport BatchCommandExecutor from './BatchCommandExecutor';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TasksPage({\n  servers,\n  selectedServer\n}) {\n  _s();\n  const [activeTab, setActiveTab] = useState('tasks');\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({\n    name: '',\n    command: '',\n    server_id: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Fetch tasks when component mounts or selectedServer changes\n  useEffect(() => {\n    fetchTasks();\n  }, [selectedServer]);\n  const fetchTasks = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:8000/tasks');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      setError('Failed to fetch tasks. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setNewTask({\n      ...newTask,\n      [name]: value\n    });\n  };\n  const handleServerChange = e => {\n    setNewTask({\n      ...newTask,\n      server_id: e.target.value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!newTask.name || !newTask.command || !newTask.server_id) {\n      setError('Please fill in all fields');\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:8000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newTask)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Reset form and fetch updated tasks\n      setNewTask({\n        name: '',\n        command: '',\n        server_id: ''\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error('Error creating task:', error);\n      setError('Failed to create task. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    if (!window.confirm('Are you sure you want to delete this task?')) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:8000/tasks/${taskId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Fetch updated tasks\n      fetchTasks();\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      setError('Failed to delete task. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleRunTask = async taskId => {\n    setLoading(true);\n    try {\n      const response = await fetch(`http://localhost:8000/tasks/${taskId}/run`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      // Fetch updated tasks to show new status\n      fetchTasks();\n    } catch (error) {\n      console.error('Error running task:', error);\n      setError('Failed to run task. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format date for display\n  const formatDate = dateString => {\n    const options = {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  // Get status badge class based on status\n  const getStatusBadgeClass = status => {\n    switch (status) {\n      case 'completed':\n        return 'status-badge completed';\n      case 'failed':\n        return 'status-badge failed';\n      case 'running':\n        return 'status-badge running';\n      case 'pending':\n        return 'status-badge pending';\n      default:\n        return 'status-badge';\n    }\n  };\n\n  // Handle batch command execution\n  const handleBatchExecute = async (serverIds, commandList, executionMode) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // For sequential execution\n      if (executionMode === 'sequential') {\n        for (const command of commandList) {\n          for (const serverId of serverIds) {\n            const response = await fetch(`http://localhost:8000/execute/${serverId}`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: `command=${encodeURIComponent(command)}`\n            });\n            if (!response.ok) {\n              throw new Error(`Failed to execute command on server ${serverId}: ${response.statusText}`);\n            }\n          }\n        }\n      }\n      // For parallel execution\n      else {\n        const promises = [];\n        for (const command of commandList) {\n          for (const serverId of serverIds) {\n            const promise = fetch(`http://localhost:8000/execute/${serverId}`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              },\n              body: `command=${encodeURIComponent(command)}`\n            });\n            promises.push(promise);\n          }\n        }\n        const results = await Promise.allSettled(promises);\n        const failures = results.filter(r => r.status === 'rejected');\n        if (failures.length > 0) {\n          throw new Error(`${failures.length} command(s) failed to execute`);\n        }\n      }\n\n      // Show success message\n      alert('Batch command execution completed successfully!');\n    } catch (error) {\n      console.error('Error executing batch commands:', error);\n      setError(`Batch execution error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tasks-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Task Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tasks-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: activeTab === 'tasks' ? 'active' : '',\n        onClick: () => setActiveTab('tasks'),\n        children: \"Scheduled Tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: activeTab === 'batch' ? 'active' : '',\n        onClick: () => setActiveTab('batch'),\n        children: \"Batch Command Execution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), activeTab === 'tasks' ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Create New Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          className: \"task-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              children: \"Task Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"name\",\n              name: \"name\",\n              value: newTask.name,\n              onChange: handleInputChange,\n              placeholder: \"Enter task name\",\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"command\",\n              children: \"Command\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"command\",\n              name: \"command\",\n              value: newTask.command,\n              onChange: handleInputChange,\n              placeholder: \"Enter command to execute\",\n              className: \"form-control\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"server_id\",\n              children: \"Server\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"server_id\",\n              name: \"server_id\",\n              value: newTask.server_id,\n              onChange: handleServerChange,\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"Select a server\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this), servers.map(server => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: server.id,\n                children: [server.name, \" \", !server.status ? '(Disconnected)' : '']\n              }, server.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 21\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary\",\n            disabled: loading,\n            children: loading ? 'Creating...' : 'Create Task'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this), loading && tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading tasks...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }, this) : tasks.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No tasks found. Create a new task to get started.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-list\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"task-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 303,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Command\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Server\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 306,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Created\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 307,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Last Run\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 308,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Actions\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 302,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: tasks.map(task => {\n                const taskServer = servers.find(s => s.id === task.server_id);\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"command-cell\",\n                    children: task.command\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 318,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: taskServer ? taskServer.name : 'Unknown'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: getStatusBadgeClass(task.status),\n                      children: task.status\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 321,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 320,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: formatDate(task.created_at)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 325,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    children: task.last_run ? formatDate(task.last_run) : 'Never'\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 326,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                    className: \"actions-cell\",\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleRunTask(task.id),\n                      disabled: task.status === 'running' || !(taskServer !== null && taskServer !== void 0 && taskServer.status),\n                      className: \"btn btn-sm btn-primary\",\n                      children: \"Run\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 328,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleDeleteTask(task.id),\n                      className: \"btn btn-sm btn-danger\",\n                      children: \"Delete\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 335,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 327,\n                    columnNumber: 27\n                  }, this)]\n                }, task.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Task History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Recent task executions will be displayed here.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-history-placeholder\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Task history feature coming soon!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"section\",\n      children: /*#__PURE__*/_jsxDEV(BatchCommandExecutor, {\n        servers: servers,\n        onExecute: handleBatchExecute\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n_s(TasksPage, \"KYHYUJVjPMPfvV7o3kP4Tl+LM/8=\");\n_c = TasksPage;\nexport default TasksPage;\nvar _c;\n$RefreshReg$(_c, \"TasksPage\");","map":{"version":3,"names":["React","useState","useEffect","BatchCommandExecutor","jsxDEV","_jsxDEV","Fragment","_Fragment","TasksPage","servers","selectedServer","_s","activeTab","setActiveTab","tasks","setTasks","newTask","setNewTask","name","command","server_id","loading","setLoading","error","setError","fetchTasks","response","fetch","ok","Error","status","data","json","console","handleInputChange","e","value","target","handleServerChange","handleSubmit","preventDefault","method","headers","body","JSON","stringify","handleDeleteTask","taskId","window","confirm","handleRunTask","formatDate","dateString","options","year","month","day","hour","minute","Date","toLocaleDateString","undefined","getStatusBadgeClass","handleBatchExecute","serverIds","commandList","executionMode","serverId","encodeURIComponent","statusText","promises","promise","push","results","Promise","allSettled","failures","filter","r","length","alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","htmlFor","type","id","onChange","placeholder","map","server","disabled","task","taskServer","find","s","created_at","last_run","onExecute","_c","$RefreshReg$"],"sources":["C:/Users/atchi/servers/mcp-switchboard/frontend/src/TasksPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport BatchCommandExecutor from './BatchCommandExecutor';\r\n\r\nfunction TasksPage({ servers, selectedServer }) {\r\n  const [activeTab, setActiveTab] = useState('tasks');\r\n  const [tasks, setTasks] = useState([]);\r\n  const [newTask, setNewTask] = useState({ name: '', command: '', server_id: '' });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch tasks when component mounts or selectedServer changes\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, [selectedServer]);\r\n\r\n  const fetchTasks = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('http://localhost:8000/tasks');\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      setTasks(data);\r\n    } catch (error) {\r\n      console.error('Error fetching tasks:', error);\r\n      setError('Failed to fetch tasks. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setNewTask({ ...newTask, [name]: value });\r\n  };\r\n\r\n  const handleServerChange = (e) => {\r\n    setNewTask({ ...newTask, server_id: e.target.value });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!newTask.name || !newTask.command || !newTask.server_id) {\r\n      setError('Please fill in all fields');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch('http://localhost:8000/tasks', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(newTask),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Reset form and fetch updated tasks\r\n      setNewTask({ name: '', command: '', server_id: '' });\r\n      fetchTasks();\r\n    } catch (error) {\r\n      console.error('Error creating task:', error);\r\n      setError('Failed to create task. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDeleteTask = async (taskId) => {\r\n    if (!window.confirm('Are you sure you want to delete this task?')) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/tasks/${taskId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Fetch updated tasks\r\n      fetchTasks();\r\n    } catch (error) {\r\n      console.error('Error deleting task:', error);\r\n      setError('Failed to delete task. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRunTask = async (taskId) => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(`http://localhost:8000/tasks/${taskId}/run`, {\r\n        method: 'POST',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      // Fetch updated tasks to show new status\r\n      fetchTasks();\r\n    } catch (error) {\r\n      console.error('Error running task:', error);\r\n      setError('Failed to run task. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Format date for display\r\n  const formatDate = (dateString) => {\r\n    const options = { \r\n      year: 'numeric', \r\n      month: 'short', \r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    };\r\n    return new Date(dateString).toLocaleDateString(undefined, options);\r\n  };\r\n\r\n  // Get status badge class based on status\r\n  const getStatusBadgeClass = (status) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return 'status-badge completed';\r\n      case 'failed':\r\n        return 'status-badge failed';\r\n      case 'running':\r\n        return 'status-badge running';\r\n      case 'pending':\r\n        return 'status-badge pending';\r\n      default:\r\n        return 'status-badge';\r\n    }\r\n  };\r\n\r\n  // Handle batch command execution\r\n  const handleBatchExecute = async (serverIds, commandList, executionMode) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // For sequential execution\r\n      if (executionMode === 'sequential') {\r\n        for (const command of commandList) {\r\n          for (const serverId of serverIds) {\r\n            const response = await fetch(`http://localhost:8000/execute/${serverId}`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n              },\r\n              body: `command=${encodeURIComponent(command)}`\r\n            });\r\n            \r\n            if (!response.ok) {\r\n              throw new Error(`Failed to execute command on server ${serverId}: ${response.statusText}`);\r\n            }\r\n          }\r\n        }\r\n      } \r\n      // For parallel execution\r\n      else {\r\n        const promises = [];\r\n        \r\n        for (const command of commandList) {\r\n          for (const serverId of serverIds) {\r\n            const promise = fetch(`http://localhost:8000/execute/${serverId}`, {\r\n              method: 'POST',\r\n              headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded'\r\n              },\r\n              body: `command=${encodeURIComponent(command)}`\r\n            });\r\n            \r\n            promises.push(promise);\r\n          }\r\n        }\r\n        \r\n        const results = await Promise.allSettled(promises);\r\n        const failures = results.filter(r => r.status === 'rejected');\r\n        \r\n        if (failures.length > 0) {\r\n          throw new Error(`${failures.length} command(s) failed to execute`);\r\n        }\r\n      }\r\n      \r\n      // Show success message\r\n      alert('Batch command execution completed successfully!');\r\n    } catch (error) {\r\n      console.error('Error executing batch commands:', error);\r\n      setError(`Batch execution error: ${error.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"tasks-page\">\r\n      <h2>Task Management</h2>\r\n      \r\n      <div className=\"tasks-tabs\">\r\n        <button \r\n          className={activeTab === 'tasks' ? 'active' : ''} \r\n          onClick={() => setActiveTab('tasks')}\r\n        >\r\n          Scheduled Tasks\r\n        </button>\r\n        <button \r\n          className={activeTab === 'batch' ? 'active' : ''} \r\n          onClick={() => setActiveTab('batch')}\r\n        >\r\n          Batch Command Execution\r\n        </button>\r\n      </div>\r\n      \r\n      {activeTab === 'tasks' ? (\r\n        <>\r\n          {/* Create Task Form */}\r\n          <section className=\"section\">\r\n            <h3>Create New Task</h3>\r\n            <form onSubmit={handleSubmit} className=\"task-form\">\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"name\">Task Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  value={newTask.name}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter task name\"\r\n                  className=\"form-control\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"command\">Command</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"command\"\r\n                  name=\"command\"\r\n                  value={newTask.command}\r\n                  onChange={handleInputChange}\r\n                  placeholder=\"Enter command to execute\"\r\n                  className=\"form-control\"\r\n                />\r\n              </div>\r\n              \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"server_id\">Server</label>\r\n                <select\r\n                  id=\"server_id\"\r\n                  name=\"server_id\"\r\n                  value={newTask.server_id}\r\n                  onChange={handleServerChange}\r\n                  className=\"form-control\"\r\n                >\r\n                  <option value=\"\">Select a server</option>\r\n                  {servers.map(server => (\r\n                    <option key={server.id} value={server.id}>\r\n                      {server.name} {!server.status ? '(Disconnected)' : ''}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              \r\n              <button \r\n                type=\"submit\" \r\n                className=\"btn btn-primary\"\r\n                disabled={loading}\r\n              >\r\n                {loading ? 'Creating...' : 'Create Task'}\r\n              </button>\r\n            </form>\r\n            \r\n            {error && <div className=\"error-message\">{error}</div>}\r\n          </section>\r\n          \r\n          {/* Task List */}\r\n          <section className=\"section\">\r\n            <h3>Tasks</h3>\r\n            {loading && tasks.length === 0 ? (\r\n              <p>Loading tasks...</p>\r\n            ) : tasks.length === 0 ? (\r\n              <p>No tasks found. Create a new task to get started.</p>\r\n            ) : (\r\n              <div className=\"task-list\">\r\n                <table className=\"task-table\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th>Name</th>\r\n                      <th>Command</th>\r\n                      <th>Server</th>\r\n                      <th>Status</th>\r\n                      <th>Created</th>\r\n                      <th>Last Run</th>\r\n                      <th>Actions</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {tasks.map(task => {\r\n                      const taskServer = servers.find(s => s.id === task.server_id);\r\n                      return (\r\n                        <tr key={task.id}>\r\n                          <td>{task.name}</td>\r\n                          <td className=\"command-cell\">{task.command}</td>\r\n                          <td>{taskServer ? taskServer.name : 'Unknown'}</td>\r\n                          <td>\r\n                            <span className={getStatusBadgeClass(task.status)}>\r\n                              {task.status}\r\n                            </span>\r\n                          </td>\r\n                          <td>{formatDate(task.created_at)}</td>\r\n                          <td>{task.last_run ? formatDate(task.last_run) : 'Never'}</td>\r\n                          <td className=\"actions-cell\">\r\n                            <button \r\n                              onClick={() => handleRunTask(task.id)}\r\n                              disabled={task.status === 'running' || !taskServer?.status}\r\n                              className=\"btn btn-sm btn-primary\"\r\n                            >\r\n                              Run\r\n                            </button>\r\n                            <button \r\n                              onClick={() => handleDeleteTask(task.id)}\r\n                              className=\"btn btn-sm btn-danger\"\r\n                            >\r\n                              Delete\r\n                            </button>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n            )}\r\n          </section>\r\n          \r\n          {/* Task History */}\r\n          <section className=\"section\">\r\n            <h3>Task History</h3>\r\n            <p>Recent task executions will be displayed here.</p>\r\n            {/* Task history implementation would go here */}\r\n            <div className=\"task-history-placeholder\">\r\n              <p>Task history feature coming soon!</p>\r\n            </div>\r\n          </section>\r\n        </>\r\n      ) : (\r\n        <section className=\"section\">\r\n          <BatchCommandExecutor \r\n            servers={servers} \r\n            onExecute={handleBatchExecute} \r\n          />\r\n        </section>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TasksPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}